AWSTemplateFormatVersion: "2010-09-09"   
Description: "Plant Doctor - Complete Infrastructure with ECS Frontend and Lambda Backend"

Parameters:
  EnvName:                               
    Type: String
    Default: prod

Resources:
  # ========================================
  # ECS CLUSTER
  # ========================================
  AppCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${EnvName}-plant-doctor-cluster"

  # ========================================
  # VPC AND NETWORKING
  # ========================================
  AppVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${EnvName}-plant-doctor-vpc"

  AppInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${EnvName}-plant-doctor-igw"

  AppVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AppVPC
      InternetGatewayId: !Ref AppInternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AppVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: !Sub "${EnvName}-plant-doctor-public-subnet"

  PublicSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AppVPC
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: !Sub "${EnvName}-plant-doctor-public-subnet-az2"

  # ========================================
  # SECURITY GROUPS
  # ========================================
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${EnvName}-plant-doctor-alb-sg"
      VpcId: !Ref AppVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${EnvName}-plant-doctor-container-sg"
      VpcId: !Ref AppVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  # ========================================
  # ECS TASK DEFINITION AND SERVICE
  # ========================================
  FrontendTaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${EnvName}-plant-doctor-frontend-task"
      Cpu: "512"
      Memory: "1024"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: frontend
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/plant-doctor-frontend:latest"
          PortMappings:
            - ContainerPort: 3000
          Essential: true
          Environment:
            - Name: REACT_APP_API_URL
              Value: !ImportValue 'plant-doctor-prod-api-url'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: frontend

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${EnvName}-plant-doctor-ecs-exec-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${EnvName}-plant-doctor"
      RetentionInDays: 7

  # ========================================
  # ROUTING
  # ========================================
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AppVPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvName}-plant-doctor-public-rt"

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref AppInternetGateway

  PublicSubnetRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetAZ2RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetAZ2
      RouteTableId: !Ref PublicRouteTable

  # ========================================
  # LOAD BALANCER
  # ========================================
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${EnvName}-plant-doctor-alb"
      Subnets:
        - !Ref PublicSubnet
        - !Ref PublicSubnetAZ2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
      Type: application

  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${EnvName}-plant-doctor-frontend-tg"
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref AppVPC
      TargetType: ip
      HealthCheckProtocol: HTTP
      HealthCheckPort: "3000"
      HealthCheckPath: "/"
      Matcher:
        HttpCode: "200"

  FrontendService:
    Type: AWS::ECS::Service
    DependsOn: 
      - HTTPListener
    Properties:
      ServiceName: !Sub "${EnvName}-plant-doctor-frontend-svc"
      Cluster: !Ref AppCluster
      TaskDefinition: !Ref FrontendTaskDef
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PublicSubnet
            - !Ref PublicSubnetAZ2
          SecurityGroups:
            - !Ref ContainerSecurityGroup
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: frontend
          ContainerPort: 3000
          TargetGroupArn: !Ref FrontendTargetGroup

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: AppLoadBalancer
    Properties:
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup

  # ========================================
  # LAMBDA BACKEND (for reference - deployed via SAM)
  # ========================================
  # Note: Lambda function is deployed via SAM template in backend/
  # This section is for reference only

Outputs:
  ClusterName:
    Value: !Ref AppCluster
    Description: "Name of the ECS cluster"
  
  ApplicationURL:
    Value: !Sub "http://${AppLoadBalancer.DNSName}"
    Description: "Plant Doctor Frontend URL"
    Export:
      Name: !Sub "${EnvName}-plant-doctor-frontend-url"

  ECRRepositoryURI:
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/plant-doctor-frontend"
    Description: "ECR Repository URI for Plant Doctor frontend"
    Export:
      Name: !Sub "${EnvName}-plant-doctor-ecr-uri"

  VPCId:
    Description: VPC ID
    Value: !Ref AppVPC
    Export:
      Name: !Sub "${EnvName}-plant-doctor-vpc-id"

  PublicSubnet1:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub "${EnvName}-plant-doctor-public-subnet-1"

  PublicSubnet2:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnetAZ2
    Export:
      Name: !Sub "${EnvName}-plant-doctor-public-subnet-2" 