name: Deploy Plant Doctor

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: plant-doctor-frontend
  ECS_CLUSTER: prod-plant-doctor-cluster
  ECS_SERVICE: prod-plant-doctor-frontend-svc
  ECS_TASK_DEFINITION: prod-plant-doctor-frontend-task
  CLOUDFORMATION_STACK: plant-doctor-infrastructure
  SAM_STACK: plant-doctor-backend

jobs:
  # Build and push frontend Docker image
  build-and-push-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./frontend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd frontend
          npm install

      - name: Build frontend
        run: |
          cd frontend
          npm run build

  # Deploy backend SAM stack
  deploy-backend:
    runs-on: ubuntu-latest
    needs: build-and-push-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Deploy SAM backend
        run: |
          cd backend
          sam build
          sam deploy --no-confirm-changeset --no-fail-on-empty-changeset

  # Deploy frontend infrastructure
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [build-and-push-frontend, deploy-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file cloudformation.yml \
            --stack-name $CLOUDFORMATION_STACK \
            --parameter-overrides EnvName=prod \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset

      - name: Force ECS service update
        run: |
          # Force new deployment to pick up latest image
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment

      - name: Wait for ECS service to be stable
        run: |
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE

  # Update frontend with new API URL
  update-frontend-api:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get API Gateway URL
        id: get-api-url
        run: |
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name $SAM_STACK \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
            --output text)
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT

      - name: Update frontend with new API URL
        run: |
          # This would update the frontend code with the new API URL
          # For now, we'll just log it
          echo "API Gateway URL: ${{ steps.get-api-url.outputs.api_url }}"
          echo "Frontend needs to be updated with this URL"

  # Health check
  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, update-frontend-api]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get ALB URL
        id: get-alb-url
        run: |
          ALB_URL=$(aws cloudformation describe-stacks \
            --stack-name $CLOUDFORMATION_STACK \
            --query 'Stacks[0].Outputs[?OutputKey==`ApplicationURL`].OutputValue' \
            --output text)
          echo "alb_url=$ALB_URL" >> $GITHUB_OUTPUT

      - name: Health check
        run: |
          echo "Checking if application is healthy..."
          echo "ALB URL: ${{ steps.get-alb-url.outputs.alb_url }}"
          # Add actual health check logic here if needed 